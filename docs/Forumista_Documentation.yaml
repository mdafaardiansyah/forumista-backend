openapi: 3.0.0
info:
  title: Forumista Backend API
  version: 1.0.0
  description: |
    Forumista is a simple yet powerful forum platform that enables users to connect, share thoughts, and engage in meaningful discussions through posts and comments. This backend API provides all the necessary endpoints to power the forum's core functionalities.

    ## Key Features
    - User authentication with JWT tokens
    - Create and manage posts with hashtags
    - Interactive commenting system
    - Post reaction system (like/dislike)
    - Pagination support for post listings

    ## Authentication
    The API uses JWT (JSON Web Token) for authentication. To access protected endpoints:
    1. Register using the /memberships/sign-up endpoint
    2. Login using /memberships/login to obtain access and refresh tokens
    3. Use the access token in the Authorization header for protected endpoints
    4. Use the refresh token endpoint when the access token expires

servers:
  - url: '{baseUrl}'
    variables:
      baseUrl:
        default: http://localhost:8080
        description: Base URL of the API server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint

  schemas:
    SignUpRequest:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: mySecurePassword123
        username:
          type: string
          example: john_doe
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: mySecurePassword123
    
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    
    RefreshTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    
    PostCreate:
      type: object
      required:
        - postTitle
        - postContent
      properties:
        postTitle:
          type: string
          example: "Getting Started with Go Programming"
        postContent:
          type: string
          example: "Here are my thoughts on learning Go..."
        postHashtags:
          type: array
          items:
            type: string
          example: ["golang", "programming", "learning"]
    
    CommentCreate:
      type: object
      required:
        - commentContent
      properties:
        commentContent:
          type: string
          example: "Great post! Thanks for sharing."
    
    UserActivity:
      type: object
      required:
        - isLiked
      properties:
        isLiked:
          type: boolean
          description: "true for like, false for dislike, null for neutral"
          example: true

paths:
  /memberships/sign-up:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email, password, and username
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User successfully created
        '400':
          description: Invalid input or email already exists

  /memberships/login:
    post:
      tags:
        - Authentication
      summary: Login to the system
      description: Authenticate user and receive access and refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /memberships/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                properties:
                  accessToken:
                    type: string
        '401':
          description: Invalid or expired refresh token

  /posts/create:
    post:
      tags:
        - Posts
      summary: Create a new post
      description: Create a new forum post with title, content, and optional hashtags
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Post created successfully
        '401':
          description: Unauthorized
        '400':
          description: Invalid input

  /posts/comment/{postID}:
    post:
      tags:
        - Comments
      summary: Add a comment to a post
      description: Create a new comment on a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: postID
          in: path
          required: true
          schema:
            type: integer
          description: ID of the post to comment on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '201':
          description: Comment added successfully
        '404':
          description: Post not found
        '401':
          description: Unauthorized

  /posts/user_activity/{postID}:
    put:
      tags:
        - Posts
      summary: Update user activity on a post
      description: Like or dislike a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: postID
          in: path
          required: true
          schema:
            type: integer
          description: ID of the post to update activity for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivity'
      responses:
        '200':
          description: Activity updated successfully
        '404':
          description: Post not found
        '401':
          description: Unauthorized

  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts with pagination
      description: Retrieve a paginated list of all posts
      security:
        - BearerAuth: []
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            minimum: 1
          description: Page number to retrieve (starts from 1)
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Number of posts per page
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        userID:
                          type: integer
                        username:
                          type: string
                        postTitle:
                          type: string
                        postContent:
                          type: string
                        postHashtags:
                          type: array
                          items:
                            type: string
                        isLiked:
                          type: boolean
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer

  /posts/{postID}:
    get:
      tags:
        - Posts
      summary: Get post by ID
      description: Retrieve detailed information about a specific post including comments and likes
      security:
        - BearerAuth: []
      parameters:
        - name: postID
          in: path
          required: true
          schema:
            type: integer
          description: ID of the post to retrieve
      responses:
        '200':
          description: Post details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  postDetail:
                    type: object
                    properties:
                      id:
                        type: integer
                      userID:
                        type: integer
                      username:
                        type: string
                      postTitle:
                        type: string
                      postContent:
                        type: string
                      postHashtags:
                        type: array
                        items:
                          type: string
                      isLiked:
                        type: boolean
                  likeCount:
                    type: integer
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        user_id:
                          type: integer
                        username:
                          type: string
                        commentContent:
                          type: string
        '404':
          description: Post not found